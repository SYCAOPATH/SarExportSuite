using Microsoft.AspNetCore.Mvc;
using SarExportSuite.Models;
using SarExportSuite.Repositories;
using OfficeOpenXml;
using Rotativa.AspNetCore;

namespace SarExportSuite.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ExportsController : ControllerBase
    {
        private readonly IExportRepository _exportRepository;

        public ExportsController(IExportRepository exportRepository)
        {
            _exportRepository = exportRepository;
        }

        // sar: Get all exports using stored procedure
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Export>>> GetExports()
        {
            try
            {
                var exports = await _exportRepository.GetExportSummaryAsync();
                return Ok(exports);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // sar: Get export by ID
        [HttpGet("{id}")]
        public async Task<ActionResult<Export>> GetExport(int id)
        {
            try
            {
                var export = await _exportRepository.GetExportByIdAsync(id);
                if (export == null)
                {
                    return NotFound();
                }
                return Ok(export);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // sar: Create new export
        [HttpPost]
        public async Task<ActionResult<Export>> CreateExport(Export export)
        {
            try
            {
                export.ExportDate = DateTime.Now;
                var id = await _exportRepository.CreateExportAsync(export);
                export.ExportId = id;
                return CreatedAtAction(nameof(GetExport), new { id = export.ExportId }, export);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // sar: Update export
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateExport(int id, Export export)
        {
            try
            {
                if (id != export.ExportId)
                {
                    return BadRequest();
                }

                var updated = await _exportRepository.UpdateExportAsync(export);
                if (!updated)
                {
                    return NotFound();
                }

                return NoContent();
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // sar: Delete export
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteExport(int id)
        {
            try
            {
                var deleted = await _exportRepository.DeleteExportAsync(id);
                if (!deleted)
                {
                    return NotFound();
                }

                return NoContent();
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // sar: Export to Excel with live data
        [HttpGet("excel")]
        public async Task<IActionResult> ExportToExcel()
        {
            try
            {
                var exports = await _exportRepository.GetExportSummaryAsync();
                
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                using var package = new ExcelPackage();
                var sheet = package.Workbook.Worksheets.Add("sar-exports");

                // Headers
                sheet.Cells[1, 1].Value = "Export ID";
                sheet.Cells[1, 2].Value = "Export Name";
                sheet.Cells[1, 3].Value = "Export Date";
                sheet.Cells[1, 4].Value = "Status";

                // Data Rows
                int row = 2;
                foreach (var export in exports)
                {
                    sheet.Cells[row, 1].Value = export.ExportId;
                    sheet.Cells[row, 2].Value = export.ExportName;
                    sheet.Cells[row, 3].Value = export.ExportDate.ToString("yyyy-MM-dd HH:mm:ss");
                    sheet.Cells[row, 4].Value = export.Status;
                    row++;
                }

                // sar: Footer watermark
                sheet.Cells[row + 1, 1].Value = "Generated by SarExportSuite - Developer: sar";

                var stream = new MemoryStream();
                package.SaveAs(stream);
                stream.Position = 0;

                return File(stream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "sar-exports.xlsx");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // sar: Export to PDF with live data
        [HttpGet("pdf")]
        public async Task<IActionResult> ExportToPdf()
        {
            try
            {
                var exports = await _exportRepository.GetExportSummaryAsync();
                
                var model = new
                {
                    Title = "Export Summary Report",
                    Exports = exports,
                    GeneratedDate = DateTime.Now,
                    Developer = "sar"
                };

                return new ViewAsPdf("PdfExportView", model)
                {
                    FileName = "sar-exports.pdf",
                    CustomSwitches = "--footer-center \"Generated by sar - SarExportSuite\" --footer-line"
                };
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
    }
}
