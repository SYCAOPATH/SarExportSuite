using Microsoft.AspNetCore.Mvc;
using OfficeOpenXml;
using Rotativa.AspNetCore;
using SarExportSuite.Repositories;
using System.IO;

namespace SarExportSuite.Controllers
{
    public class ExportController : Controller
    {
        private readonly IExportRepository _exportRepository;

        public ExportController(IExportRepository exportRepository)
        {
            _exportRepository = exportRepository;
        }

        // sar: Main page for export options with live data
        public async Task<IActionResult> Index()
        {
            try
            {
                var exports = await _exportRepository.GetExportSummaryAsync();
                return View(exports);
            }
            catch (Exception)
            {
                // Fallback to empty list if database is not available
                return View(new List<SarExportSuite.Models.Export>());
            }
        }

        // sar: Export Excel file with live data from database
        public async Task<IActionResult> ExportExcel()
        {
            try
            {
                var exports = await _exportRepository.GetExportSummaryAsync();
                
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                using var package = new ExcelPackage();
                var sheet = package.Workbook.Worksheets.Add("sar-exports");

                // Headers
                sheet.Cells[1, 1].Value = "Export ID";
                sheet.Cells[1, 2].Value = "Export Name";
                sheet.Cells[1, 3].Value = "Export Date";
                sheet.Cells[1, 4].Value = "Status";

                // Data Rows from database
                int row = 2;
                foreach (var export in exports)
                {
                    sheet.Cells[row, 1].Value = export.ExportId;
                    sheet.Cells[row, 2].Value = export.ExportName;
                    sheet.Cells[row, 3].Value = export.ExportDate.ToString("yyyy-MM-dd HH:mm:ss");
                    sheet.Cells[row, 4].Value = export.Status;
                    row++;
                }

                // sar: Footer watermark
                sheet.Cells[row + 1, 1].Value = "Generated by SarExportSuite - Developer: sar";

                var stream = new MemoryStream();
                package.SaveAs(stream);
                stream.Position = 0;

                return File(stream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "sar-exports.xlsx");
            }
            catch (Exception ex)
            {
                TempData["Error"] = $"Error exporting to Excel: {ex.Message}";
                return RedirectToAction("Index");
            }
        }

        // sar: Export PDF from Razor view with live data
        public async Task<IActionResult> ExportPdf()
        {
            try
            {
                var exports = await _exportRepository.GetExportSummaryAsync();
                
                var model = new
                {
                    Title = "Export Summary Report",
                    Exports = exports,
                    GeneratedDate = DateTime.Now,
                    Developer = "sar"
                };

                return new ViewAsPdf("PdfView", model)
                {
                    FileName = "sar-exports.pdf",
                    CustomSwitches = "--footer-center \"Generated by sar - SarExportSuite\" --footer-line"
                };
            }
            catch (Exception ex)
            {
                TempData["Error"] = $"Error exporting to PDF: {ex.Message}";
                return RedirectToAction("Index");
            }
        }
    }
}
